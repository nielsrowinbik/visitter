

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

generator jsonSchema {
  provider  = "prisma-json-schema-generator"
  output    = "./"
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.VarChar(500)
    access_token             String? @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Booking {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    startDate   DateTime
    endDate     DateTime
    home        Home        @relation(fields: [homeId], references: [id], onDelete: Cascade)
    homeId      String
}

model Home {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    name        String
    owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    bookings    Booking[]
    shareKey    ShareKey?
}

model Session {
    id           String     @id @default(cuid())
    sessionToken String     @unique
    expires      DateTime
    user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model ShareKey {
    id          String      @id @default(cuid())
    home        Home        @relation(fields: [homeId], references: [id], onDelete: Cascade)
    homeId      String      @unique
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          String?   @default("user")
    accounts      Account[]
    sessions      Session[]
    homes         Home[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}